''' Advanced Encryption Standard - Block Cipher '''

# Copyright (c) 2011, Stefano Palazzo <stefano.palazzo@gmail.com>
# Copyright (c) 2011, Zeinab Lotfi <zeinab.l.cs@gmail.com>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


class AES(object):

    # the block size  of AES is always 16
    # bytes, no matter what the key size is.
    block_size = 16

    # lookup talbe for the rijndael s-box
    sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16]

    # lookup talbe for the inverse rijndael s-box
    rsbox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
            0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
            0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54,
            0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
            0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
            0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8,
            0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
            0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
            0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab,
            0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
            0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
            0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
            0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
            0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
            0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d,
            0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
            0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
            0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60,
            0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
            0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
            0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b,
            0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
            0x21, 0x0c, 0x7d]

    # lookup table for r-con (n**2 in rijndaels finite filed GF(2^8)
    rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
            0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
            0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
            0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
            0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
            0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
            0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
            0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
            0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
            0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
            0xe8, 0xcb]

    def __init__(self):
        pass

    @staticmethod
    def xor(a, b):
        ''' bitwise xor on equal length bytearrays '''
        return bytearray(i ^ j for i, j in zip(a, b))

    @staticmethod
    def rotate(word):
        ''' rotate a sequence of bytes eight bits to the left '''
        return word[1:] + word[:1]

    def rijndael_key_schedule(self, key):

        def rijndael_key_schedule_core(key_word, rcon_iteration):

            # rotate eight bits to the left:
            key_word = self.rotate(key_word)
            # apply the s-box to all 4 bytes:
            key_word = bytearray(self.sbox[i] for i in key_word)
            # xor the first byte with the rcon value for the current iteration
            key_word[0] = key_word[0] ^ self.rcon[rcon_iteration]

            return key_word

        # define constants for the length of the key
        # and length of the expanded key, n and b:
        if len(key) == 16:
            n, b = 16, 176
        elif len(key) == 24:
            n, b = 24, 208
        elif len(key) == 32:
            n, b = 32, 240
        else:
            raise ValueError("key must be 16, 24 or 32 bytes long")

        # the expanded key has the length b, and it's 
        # first n bytes are the encryption key itself:
        expanded_key = bytearray(b)
        expanded_key[:len(key)] = key

        current_size = len(key)
        rcon_iteration = 1

        while current_size < b:
            # adding 4 bytes to the expanded key, starting
            # with the value of the previous 4 bytes in the
            # expanded key:

            # expanded_key is the expanded key, cs is the current size of it

            # t is the previous 4 bytes in the expanded key:
            t = expanded_key[current_size - 4:current_size]  #1
            
            # perform the key schedule core on t:
            t = rijndael_key_schedule_core(t, rcon_iteration)
            rcon_iteration += 1
            # exclusive-or t with the 4 bytes before the expanded key
            # and make that the next 4 bytes of the expanded key:
            expanded_key[current_size:current_size + 4] = self.xor(
                expanded_key[current_size - n:current_size - n + 4], t) #2
            current_size += 4

            for i in range(3):
                t = expanded_key[current_size - 4:current_size]  #1
                expanded_key[current_size:current_size + 4] = self.xor(
                    expanded_key[current_size - n:current_size - n + 4], t)  #2
                current_size += 4

            if n == 32:  # if we're generating a 256 bit key
                t = expanded_key[current_size - 4:current_size]  #1
                # run each of the 4 bytes through the rijdael s-box:
                t = bytearray(self.sbox[i] for i in t)
                expanded_key[current_size:current_size + 4] = self.xor(
                    expanded_key[current_size - n:current_size - n + 4], t)  #2
                current_size += 4

            # if we're generating a 128 bit key, don't do the next step,
            # do it 2 times for a 192 bit key, 3 times for a 256 bit key:
            for i in range(0 if n == 16 else 2 if n == 24 else 3):
                t = expanded_key[current_size - 4:current_size]  #1
                expanded_key[current_size:current_size + 4] = self.xor(
                    expanded_key[current_size - n:current_size - n + 4], t)  #2
                current_size += 4

        # because of the last step, the expanded key might be too long:
        return expanded_key[:b]

    def encrypt(self, data, key):
        return self.start(data, key, inverted=False)

    def decrypt(self, data, key):
        return self.start(data, key, inverted=True)

    def start(self, data, key, inverted=False):
        # determine the number of rounds and raise
        # an exception for wrongly sized keys:
        if len(key) == 16:
            n_rounds = 10
        elif len(key) == 24:
            n_rounds = 12
        elif len(key) == 32:
            n_rounds = 14
        else:
            raise ValueError("key must be 16, 24 or 32 bytes long")
        # empty bytearrays for our current block and the result,
        # bytearrays are the mutable version of <type 'bytes'>:
        block, result = bytearray(16), bytearray(16)

        # get the expanded key from the rijndael key schedule:
        expanded_key = self.rijndael_key_schedule(key)

        # aes operates on a 4 by 4 matrix, the state, which is
        # stored as a flat array in column-major order, such that
        # [[1, 2, 3], [4, 5, 6]] becomes [1, 4, 2, 5, 3, 6]:
        for i in range(4):
            for j in range(4):
                block[(i + (j * 4))] = data[(i * 4) + j]

        # initial round and start of the aes process:
        block = self.main(block, expanded_key, n_rounds, inverted)

        # here we turn the flat matrix back into a linear array
        # from column-major order:
        for k in range(4):
            for l in range(4):
                result[(k * 4) + l] = block[(k + (l * 4))]

        # return the result as an immutable bytes object:
        return bytes(result)

    def get_round_key(self, expanded_key, kp):
        round_key = bytearray(16)
        for i in range(4):
            for j in range(4):
                round_key[j * 4 + i] = expanded_key[kp + i * 4 + j]
        return round_key

    def add_round_key(self, state, expanded_key, kp):
        # xor the state with the round key
        return self.xor(state, self.get_round_key(expanded_key, kp))

    def main(self, state, expanded_key, n_rounds, inverted=False):

        # i is used as the round key pointer (kp)
        # and the iteration is reversed on decryption

        # initial round:
        x = (16 * n_rounds) if inverted else 0
        state = self.add_round_key(state, expanded_key, x)

        # normal rounds:
        for i in (range(n_rounds - 1, 0, -1)
                if inverted else range(1, n_rounds)):
            if inverted:
                state = self.shift_rows(state, inverted)
                state = self.sub_bytes(state, inverted)
                state = self.add_round_key(state, expanded_key, 16 * i)
                state = self.mix_columns(state, inverted)
            else:
                state = self.sub_bytes(state, inverted)
                state = self.shift_rows(state, inverted)
                state = self.mix_columns(state, inverted)
                state = self.add_round_key(state, expanded_key, 16 * i)

        # final round
        state = self.sub_bytes(state, inverted)
        state = self.shift_rows(state, inverted)
        x = (16 * n_rounds) if not inverted else 0
        state = self.add_round_key(state, expanded_key, x)

        return state

    def sub_bytes(self, state, inverted=False):
        if not inverted:
            return bytearray(self.sbox[i] for i in state)
        else:
            return bytearray(self.rsbox[i] for i in state)

    def shift_rows(self, state, inverted=False):
        # transform our column-major order array back into a matrix:
        matrix = [bytearray(4) for i in range(4)]
        for i in range(4):
            for j in range(4):
                matrix[i][j] = state[(i * 4) + j]

        if not inverted:
            # each byte of the nth row is shifted n to the left (0, 1, 2, 3):
            matrix[1] = matrix[1][1:] + matrix[1][:1]
            matrix[2] = matrix[2][2:] + matrix[2][:2]
            matrix[3] = matrix[3][3:] + matrix[3][:3]

        else:
            # each byte of the nth row is shifted n to the left (0, 1, 2, 3):
            matrix[1] = matrix[1][-1:] + matrix[1][:-1]
            matrix[2] = matrix[2][-2:] + matrix[2][:-2]
            matrix[3] = matrix[3][-3:] + matrix[3][:-3]

        # transform the matrix back to column-major order:
        state = bytearray(16)
        for i in range(4):
            for j in range(4):
                state[(i + (j * 4))] = matrix[j][i]

        return state

    galois_multiplication = [[], [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
            0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
            0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
            0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
            0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
            0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
            0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
            0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
            0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
            0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
            0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
            0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
            0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
            0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
            0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
            0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
        [
            0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e,
            0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
            0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e,
            0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
            0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e,
            0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
            0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e,
            0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
            0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
            0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
            0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae,
            0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
            0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce,
            0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
            0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
            0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
            0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15,
            0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
            0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35,
            0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
            0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55,
            0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
            0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75,
            0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
            0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95,
            0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
            0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5,
            0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
            0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5,
            0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
            0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5,
            0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5],
        [
            0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09,
            0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
            0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39,
            0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
            0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69,
            0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
            0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59,
            0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
            0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9,
            0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
            0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9,
            0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
            0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9,
            0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
            0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99,
            0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
            0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92,
            0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
            0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2,
            0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
            0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2,
            0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
            0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2,
            0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
            0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52,
            0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
            0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62,
            0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
            0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32,
            0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
            0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02,
            0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a],
        [], [], [], [], [], [
            0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f,
            0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77,
            0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf,
            0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7,
            0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04,
            0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
            0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94,
            0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc,
            0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49,
            0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01,
            0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9,
            0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91,
            0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72,
            0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a,
            0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2,
            0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa,
            0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3,
            0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
            0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43,
            0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b,
            0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8,
            0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0,
            0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78,
            0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
            0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5,
            0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed,
            0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35,
            0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d,
            0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e,
            0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6,
            0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e,
            0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46],
        [], [
            0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31,
            0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69,
            0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81,
            0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9,
            0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a,
            0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
            0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa,
            0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2,
            0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7,
            0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f,
            0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77,
            0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f,
            0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc,
            0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4,
            0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c,
            0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54,
            0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6,
            0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
            0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76,
            0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e,
            0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd,
            0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5,
            0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d,
            0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
            0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30,
            0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68,
            0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80,
            0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8,
            0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b,
            0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13,
            0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb,
            0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3],
        [], [
            0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23,
            0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b,
            0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3,
            0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b,
            0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98,
            0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
            0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48,
            0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20,
            0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e,
            0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26,
            0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e,
            0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6,
            0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5,
            0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d,
            0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25,
            0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d,
            0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9,
            0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
            0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29,
            0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41,
            0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42,
            0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a,
            0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92,
            0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
            0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94,
            0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc,
            0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44,
            0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c,
            0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f,
            0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47,
            0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff,
            0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97],
        [
            0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a,
            0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a,
            0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca,
            0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba,
            0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1,
            0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
            0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11,
            0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61,
            0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87,
            0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7,
            0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67,
            0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17,
            0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c,
            0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c,
            0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc,
            0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc,
            0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b,
            0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
            0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b,
            0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,
            0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0,
            0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0,
            0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50,
            0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
            0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6,
            0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6,
            0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26,
            0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56,
            0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d,
            0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d,
            0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd,
            0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d],
    ]


    def mix_columns(self, state, inverted=False):

        def mix_column(column):
            if not inverted:
                m = [2, 1, 1, 3]
            else:
                m = [14, 9, 13, 11]
        
            c = bytearray(i for i in column)
            g = lambda a, b: self.galois_multiplication[b][a]

            column[0] = (g(c[0], m[0]) ^ g(c[3], m[1]) ^
                g(c[2], m[2]) ^ g(c[1], m[3]))
            column[1] = (g(c[1], m[0]) ^ g(c[0], m[1]) ^
                g(c[3], m[2]) ^ g(c[2], m[3]))
            column[2] = (g(c[2], m[0]) ^ g(c[1], m[1]) ^
                g(c[0], m[2]) ^ g(c[3], m[3]))
            column[3] = (g(c[3], m[0]) ^ g(c[2], m[1]) ^
                g(c[1], m[2]) ^ g(c[0], m[3]))

            return column

        for i in range(4):
            # get a column out of our column-major order matrix:
            column = state[i:i + 16:4]
            # apply mix_column to that:
            column = mix_column(column)
            # re-insert the result into the matrix array:
            state[i:i + 16:4] = column
        return state


def test_key_schedule():

    a = AES()

    assert a.rijndael_key_schedule(b"\1" * 16) == bytearray(b"\x01\x01\x01"
        b"\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01|}}}}||||}}}}"
        b"|||nmm\x82\x13\x11\x11\xfeoll\x83\x12\x10\x10\xff\xa0\xa7{K\xb3\xb6"
        b"j\xb5\xdc\xda\x066\xce\xca\x16\xc9\xdc\xe0\xa6\xc0oV\xccu\xb3\x8c"
        b"\xcaC}F\xdc\x8a\x96f\xd8?\xf90\x14JJ\xbc\xde\t7\xfa\x02\x83\x9b\x11"
        b"4\xa5b! \xef(\x9d\xfe\xe6\x1fg\xfce^\xa1ye<\x80Y\x8a\x14\x1d\xa7l"
        b"\x0bz[\t\x04\x98xN8\x18!\xc4,\x05\x86\xa8\'\x7f\xdd\xa1\xcdYJ\x82"
        b"\xf5AkF\xd9D\xed\xee\xfe;0O\x19]\xce9\xec\x1c\xa5\x7f5XH\x91\xcb"
        b"cx\xde")

    assert a.rijndael_key_schedule(b"\1" * 24) == bytearray(b"\x01\x01\x01"
        b"\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
        b"\x01\x01\x01\x01\x01|}}}}||||}}}}||||}}}}|||nmm\x82\x13\x11\x11"
        b"\xfeoll\x83\x12\x10\x10\xffnmm\x82\x13\x11\x11\xfe\xe8\xef\xd6\xff"
        b"\xfb\xfe\xc7\x01\x94\x92\xab\x82\x86\x82\xbb}\xe8\xef\xd6\xff\xfb"
        b"\xfe\xc7\x01[)\xaa\xf0\xa0\xd7m\xf14E\xc6s\xb2\xc7}\x0eZ(\xab\xf1"
        b"\xa1\xd6l\xf0\xbdy&\xc2\x1d\xaeK3)\xeb\x8d@\x9b,\xf0N\xc1\x04[\xbf"
        b"`\xd27O(\xe3\xa2\x125M\xe9!\x1c\xa6da\x87\x8a\x94/F\x8e\xcf\x90&\\"
        b"\xf8\xdf\"\xa2<\xe5\x17\xef\xd5\xc4\x0bI\xb1\xa5\x8c\xc3%\x8a\xcaM"
        b"\xea\x1a\xec\x11\x12\xc5 k\x9a+7\x84O\xef<\xcd\xfeJ\xb0\x0e\xdb\xc0")

    assert a.rijndael_key_schedule(b"\1" * 32) == bytearray(b"\x01\x01\x01"
        b"\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
        b"\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01|}}}}||||}}}}"
        b"|||\xfe\x11\x11\x11\xff\x10\x10\x10\xfe\x11\x11\x11\xff\x10\x10"
        b"\x10\xb4\xb7\xb7k\xc9\xcb\xcb\x17\xb5\xb6\xb6j\xc8\xca\xca\x16\x16"
        b"eeV\xe9uuF\x17ddW\xe8ttG\"%\x17\xf0\xeb\xee\xdc\xe7^Xj\x8d\x96\x92"
        b"\xa0\x9b\x86*\x85Bo_\xf0\x04x;\x94S\x90O\xe0\x14\xae\xc4\xed\x90E*"
        b"1w\x1br[\xfa\x8d\xe0\xfba\xdb\xcb\x8a\xad\xb4\x94z\xa9\xcc\xaf\xee"
        b"\xfa\\\xe0\x0e\xee_o\xc5\xda\x1aE\xf4\xad\x017\xafW\x8c\xd7T6\xbf"
        b"\xc5\xaa\xa8\x0bQ\xd0\x01\xc7\xfe>\xfb\x9b\x1e0\x15\rk\x9c\xce\x17"
        b".hc\x16\x19\xc74\x9a\xce\x93\x02\x07Nv\xdf\x0c\x1f\xa6\xde\xcb\xe1"
        b"\x98%P\xff\xa80[\xa9\x98\x9dL\x87\xf0\xfeZ\x9e7\xca\xc0P\xa4\xc8")


def test_shift_rows():
    a = AES()
    assert a.shift_rows(bytearray(range(1, 17))) == bytearray(
        [1, 2, 3, 4, 6, 7, 8, 5, 11, 12, 9, 10, 16, 13, 14, 15])


def test_mix_columns():
    a = AES()
    assert a.mix_columns(bytearray(range(1, 17))) == bytearray(
        [9, 10, 11, 12, 29, 30, 31, 16, 1, 2, 3, 36, 21, 22, 23, 40])


def test_encryption():
    a = AES()
    assert a.encrypt(b"d" * 16, b"k" * 32) == b'\xa7i\xfdW\x98T@{v\xdd\x05Ye\x87I\xb7'
    assert a.encrypt(b'\xea\x0c\x073\xca\xac\xc2\xe3w\xd0$c]\xadz$',
        b'V\x87\xecg,}"\x91*\xf3\xb7\x04\x9a\x96\xcaj') == (
        b'+\xe9:Y\xbaS\x13\x07oB\x16\x11V\xff&\x05')
    assert a.encrypt(b'\xfc;\x15\xcc%K\xe1R6\xde\x1de\xae\xa7\x90L',
        b'Q\x01Y\x8e\x16\x17\x1a\x88g\xa4\xb7\xce39\xa6\xb9') == (
        b'?\xce\xe0j1\x8b\xb0\xca\xdf\xcc}\xbc\xd95\x92#')
    assert a.encrypt(b'7\xbeF\x8e\\]0\x95\xdb\x14\xdcQ\x0c\x9fH\x88',
        b'lfvV\x1a\xba\xb6\xb6S\xc2z\xbc\x7fts\x9a') == (
        b'\xea\x92\nY\xb7\xf9\xd9\\\x07\xfd\xb4\x05\x1b8C\xed')
    assert a.encrypt(b'\xa1j\xb1)\x12\xe4\xa4\xdaW \x97Gy\x93.\xc2',
        b'\xe8\xe6\x0c\xc0\xc4\x84\xfeR;/\x04\xe1\xfb\x90\xed\xb8') == (
        b'UZ*$L/\xa67\x91W\xc3\xea\x83\xb8m"')
    assert a.encrypt(b'\xe8F~%\xf3>\x02\xc3*\x1a\x83!0\x99\x81\x1a',
        b':\xe0\xad\xf3:\x04H\xfa\x02\n\xb5\x13\xca\x93\xe35') == (
        b'\xa1{\xf2T;\xbe3\x9a\xe9G\x95\x81\xe7L\xd6m')
    assert a.encrypt(b'\x1d\x81r\xafPK\xba\xcf\xfa:h\xecR\xd8\xad\xc4',
        b'\x12w\xacE\x17^\xd0\x8c\xba\xe7\x91\xbe7\xbe,+') == (
        b'W\xfd\xe8uyf\xc2\xbdX~\x95Ar\x92\xbbt')
    assert a.encrypt(b'9\xa3(-I\x1b(uBn\xa9\xf1\x9c\xd6v9',
        b'[\xd4\x89\xe6{\xa2`\xd63\x94n\tb$\x935') == (
        b'\x1amk\x83\xc6\x9d\xe9\xcd\x96\xceu\xc1\x7f\xf7\xa9\x9d')
    assert a.encrypt(b'1\x18:Ul\xc9bk\xec\x17\x9b\x13\xb5\xef\x1cf',
        b'\xa1c\x0bgD\xf1\xde,;h\xack\x96\x98\x19\x12') == (
        b'\xa9w~\x80]\xed\xb5\xcdo\xce#\xfa?\x85\xb5W')
    assert a.encrypt(b'W[\xb8#\xa3\xc1\xa2\xcc\xd0\xfd\xb4\xe7\xad!\xbd\x1c',
        b'KVn\xa6\xbf.\x8fGM\x15\x04R\xb1:\x17:') == (
        b'\xb7m\xc9</f\xc0vcRF\x96\x19D\x07\xf3')
    assert a.encrypt(b'Zj\x02N1\xc2n\xf8\x9e\x80\x1c\x04_"Q\xef',
        b'O\x1dO1Gh\xc9\xf2\x1a\x06\xef\x82|\x14\xe44') == (
        b'Q\xeaXq\x0eY\x98\x06\x1f\xe5\xa6\xf2\x1d(1<')
    assert a.encrypt(b'f\xed^\xe2\xf5\xfc\x1f\xd9\xb2"#\xe8\x9c\xd7P\x9b',
        b'\xe0LN$w[G\xa9\xe7B\xfd\xae\xfa8\xdb\xfa') == (
        b'\xab\x90\xdd\x99\x06&37t\r\xd8\x05\xb8\xe4\xf2T')
    assert a.encrypt(b'\x8b\x82\xe2\xf0X\x8aX\xc7\x98In\xbc\xb4\xac+o',
        b'\x9f<V\xadZ\x1b(\xa9\xb4q\xbd\xac\xa0Y\xe8\xd5') == (
        b'\x12\x11Ne=\xca\xe90/w\x1b\xac\x07\xd2\xb8\xd7')
    assert a.encrypt(b'\xc6PA\xe5\x05\xc2\x846\xf4d$[{\x8f!i',
        b'\xbc\xb7X\xc4\x92)\xb1F\x8aV\x1f\xb5\xe0\xf2;\x80') == (
        b'`q|3\xd0)\xcd\xb79\xad\xd1\xdb\xd0NBM')
    assert a.encrypt(b'\nO\x16\xa2t\x10\nx?\xbb\x15\x89\x15\x16\xf7\xea',
        b'\xdd\xa1Q~\xed\x92\x07\xab\xb1J\xf3\xefs\xa0\xdd\xe6') == (
        b'~9O`\x86\xebn\xbb\xb0BM\x86H\xccNy')
    assert a.encrypt(b'\xbd\xe5k\x8c\r\x01`\xad)Q\x01\xc6\x11\xa2bE',
        b'p\x11\x88\xf7Yx\xfcw\xf9D\xb9$\xfc\x90\xabJ') == (
        b'\xe0\x13k x\x05\x85b\x83\xa0\xf0@`f\xc8\xcc')
    assert a.encrypt(b'\x19x=\x1a\xdc\x02\xdc\xc6\xf2s\xf5h\xd2\xc4\xffP',
        b'\xb4/\r\xb3\x0cE\xea\n\xb7nMK\xe6kn\xab') == (
        b':\x12\xcd\x1d\xb8\xd8O=\xef\x85\xb0\x83\xec7\xacs')
    assert a.encrypt(b'\x96\xb4\xd2\x8b\x0e;{Vinh|S\x08d\x17',
        b'k/\xec:\x16h\xf1\xbfr\xba\xf0\x8b\x19\xba\xb5\xe5') == (
        b'U\xf7\x06\xdb\xd7\xe9,\xb1f\xd2\x98\'\xc7\xcb"\x1f')
    assert a.encrypt(b'\xcf\xa7\xd21\xb8\x8aS\xa8\xaa)\x08\xb7+\x18\x9c\xf9',
        b'Lm5\x92\x18d\xf6\x8e\xb2Q\xd3s\x10\xfa\x07\xeb') == (
        b'\xe9.\xad\x83\xb2Lu\x9a\x03F\xf9\xc5\\\xd5\x08\xe0')
    assert a.encrypt(b'\xdb\xdf\xc7_\x0e\xd5\xdb>\x92\xed\xe3\xc0U]\xe1O',
        b',\x98\xd9Y\x91\xf3/H\xb7st:\xe8\xf7h\xa8') == (
        b'\x1b\x00$\xda""\xc2\x9c\xb4\xef\x1c\xc7\x80\xa5@\xfc')
    assert a.encrypt(b'\xe7\xd4.\xdf\xe2y\xcf)\xceH\x8f\x08\xc8\xf5l\xe9',
        b"\x04\x90\xcb\x8d\xa4\x92\xe3x$}\x04iU'\xa2\xe6") == (
        b'\xc8\x7f!\x1c%9\x03\xd1\xf1\x9f\x05o\xe3\x99ng')
    assert a.encrypt(b'D6j\xd9\xf9\xb1_{g\xfe\xe1\x95|=\x95\xbb',
        b'1\xb2\xb1\xb0\x82\xa8\xad\xecM\xc5Z\x90\x88\x94\xad3\xa32\x07@p6w\xe4') == (
        b'\xc1)A\xb7\xb5s\xdf6\xa23\xe2\xd4\xd8f\x1eN')
    assert a.encrypt(b'\xbc\xe3\xbc`\x95\x00c\x1f\xf0\xa4\xc2wDO\xa4\x9f',
        b'\x06\xcf\xf1V\xeb\xf9\xd2\xc5\x03\xb3Dt\x9e#\xf6n\xefq\xf4\xe1\x84\x8f\x7f\xb5') == (
        b'\x02N\x97\xfd\xca~\x11 5B\xe3\xfe\x08@X\xc4')
    assert a.encrypt(b'\x9d\x1a\xf4;\xab\xe7\xf0\xad\xe3\x9e\x940)\x80\x1f\xca',
        b"'\x18\x85-\x89kcbU\xbf\x0e\xedLK\xd5\x9a}L)\xd9\x9e\x1c\xe2Y") == (
        b'\t\xdd\x19>\xf6`\x07\x94\xb1\x9b\x9em\x9a\xb9\x16\xe7')
    assert a.encrypt(b'S\x9e\x0bF\xd1\xc853*\xbb\\iPT\xae\xaa',
        b'\t\xaaF\x08e\xc7\xf1\xd3;\xa1\x92M\xe7Z=\x04e\x08\x10\xf1\x90\x07@\xbf') == (
        b"H\xe7b\xf5S6.\x89V\xfa`\xaf\xef''\x95")
    assert a.encrypt(b'f\xfb\xc4d\x14-\x9ex\x8b\xab@M\xe3\xce\xc6\x04',
        b'\xb4y\xfe\xef*TG@M\xe8N\xb5\x08\xbf\x19\xc8\xda\x19\x86\x1a\x08\x98\xab\xd1') == (
        b'~\xe1\xce3o\xf2X\xa0\xcc\xa5\xb26J\xad\x7fD')
    assert a.encrypt(b'\xe5\xd1\xa7M\xb6\xbb\xf6A\xa6\t\x81\xd5\xe70\xe0\x16',
        b'I\x04\xeb7x\xcb5\xa0g\xa3\xa0\x1dC\x89R-\x95x\x8bq\x1a\x1c\x9c\xf9') == (
        b';H@\xd1M\xe6b\x19\x99g?R\xf3t\x07\xf8')
    assert a.encrypt(b'\n\xf9\xcc\xee?D\x9ab\xddo|n\x1d\x82?\xcb',
        b'\r\x7fm\xcd\x19\x18,\xb1\xc4\xa0\xac\xed\xb0\xce\x89\x18\x19\xdakw\xf4BY\xfe') == (
        b"\xa5\x81\x14\xafl\n\x91s\x94\xf9'\xf0\x0b\xe4\xd49")
    assert a.encrypt(b'\xa6\nC\x17\xed)\xfcA?\x97\xe0L\xda\x19\xfe\xaa',
        b"\xfe\x10*\xc7\x9a\xfd\x984Y\x19\x7fD\xf2 \xc7U'\xde\xf01F\x1f)a") == (
        b'\xaa+\xd3k&\x00\xd9\xa1DEk\xfck\xb9lw')
    assert a.encrypt(b'x\xff@\xed\x92(>\x85\x85\xa4b|\xfa\r\xf3\xc9',
        b'\xdaq\xd0\x80\x9dz\xabb\x18\nW\x03Dg%\x0cn\xb7\xf3R|\xef$Y') == (
        b'\xed\x1a\xe0\x8d\xd8\x15y<?\x87\xf1\xaa\xcf\x14\x98\x14')
    assert a.encrypt(b'\xa4\x90BI\xba\xd0B\xb0"\x03\xa5\xa9\xa1*\xf1K',
        b'D\x04\xfeO\x05\x07Q!+\x10\xe0\xc4\xec!\x90%\xc88\xe0\x1c\xb3w\xe3\xc5') == (
        b'QY\xed\x8f8\x84\xba\xbdkx_B\xfa%@A')
    assert a.encrypt(b'j\xd4Y4\xf81\x95\x89\xe7u"[\xc1\x0e\x7f\xe7',
        b'!P\xfc\xff\x9f\xad\x98\x80\xccEE$s;>M|z\xbe\x03?\xe7Lf') == (
        b'\xb9^\xc8\xf9\xac\xfd\x8eP\xdd\r\xa4\xb1\x9e\xd8\xfc\xf2')
    assert a.encrypt(b'\xfd+\x05\x177%#\xe6\xce\xe4Ke\x0c\x90\xfb\xec',
        b'\x85\x8b\xe6\xb5\x82\x02\x8f\xc6u-\xbbo\x7fa\xdc\xce(N\x0f{\xce\xc1\x81z') == (
        b'\x06$\xeb\xeekzP\xbe\xd9\xfe\x84\xf4&&\x16\xa3')
    assert a.encrypt(b'\xdcR\x14\xf2\x14\xf5\xb1\xd5=\x9cd,\x15\xaf+\xcb',
        b'\xf0n\xbe\xa9L\x83=U)\xa9|\xe2\xeea\x16D\xceX\x9dy\xfa\x80\x91\x9e') == (
        b')\xeb\xf6\xab\xee\x04J;\xe17\x97\x86\x183\x86\xc9')
    assert a.encrypt(b'\x00\x07\xcf&\xddjsO\xf7(\xd3\xe4"\x14~\xd9',
        b'\xc9\xee\x8c\xfd\xd8\xb5\xc5\xb69>\xf7\xd1\xcdj\xf1\x80\xd1,\xdbl \x1b\xa4]') == (
        b'\x98\x97.\x91\xf1D\x0e2q\xb4r\xcb\xf5A\x04)')
    assert a.encrypt(b'\xbc\x12\x99(\xfb\xa4\x0e\xb4\xa8a\x12Q6h\xbb+',
        b'\x89\xae=m\x80A\x1d\x08\x17\x87=Aw\x98\x86/\xf3e\xd3\xcb\xca\xeb=\xf8') == (
        b'\xed\xb2\xd7\xdaH\x8el\xcc\xa4\x0e\xaf\xc0\xf7Q\xea\xa0')
    assert a.encrypt(b'\x89#4\xe8\xb3\n\x9d,\xa9n\xd62n\xe5\xce\xcb',
        b'\x13\x8bo\x19KI\xde\xfd~\xf0\xff\x05o\xe0*\x97\x13Nc\x82\xd1v\xfbX') == (
        b'\x15\xa3/@\x9e\xa6\xa8\xe1"\xc1\x18\x87-MR>')
    assert a.encrypt(b'\xec++f\xc8\x01\xb7m\\\xeb~\xf3\x96\xdd\x95\\',
        b'\xd7[\xf9\xbe\xbe\x94\x12\x91\x00\x83\xc2\xca"s!\xec\xc6.\xf8\xe4\x1a\x93\xbc\xcc') == (
        b'\x84\xe0\xdb\xc5\xb8\t\x078\xff\xf1\xbf\xe8N\xd5\x84\x18')
    assert a.encrypt(b'K\xcfOM\x9b\xfb8g$tQ\x06\xf7\xf7\xd3\xb2',
        b'\x07\xef\xfe\xf3\xb7\xa7\xe8\x84\xabf\xba\x83\xac\x1d\x03\x87\xe9F\xb9\xadK\xa4\x04F') == (
        b'a\x83\x85\xd8J\xe4\x82\x9c[p\xe2\x84t\xef\xbd6')
    assert a.encrypt(b'\xa7\x13\x80?\xba\n^J\xb5\xb0\xdc\xf9\xc28c\xe6',
        b'\x85I\xc3@\xe1\x99\x8b\x91?\xaf\xa6|J\xf9w\x83\xfd\xe5\x9bp\xb1\xb7s\xab') == (
        b':\xba\x93\xdd\xc4\x0f|\xfc\xe7\xebm[ \xd8e\xb5')
    assert a.encrypt(b'\x1e\xef\x18h\xa4M\xdd-\xf7:y\x16\xd6\xd5!_',
        b'\x85\xd0\x0c\xcfJ\x11\x91\xe6\x92<Ic\x91\xc3G\xf2E\x1b\xce\x84\xd2\xf6\x15\xdf') == (
        b"\x1f'H\x1f\x9b2\xbc\xa2\xdejz/\x9b-^\xb6")
    assert a.encrypt(b'\xb4\x06\x85\xd8\xa3\xce\x07\xe9\x85\xe9\xae\xdf\xdf\xf4$k',
        b'"}\xdb\xac\x8b^&o\x9b\xc8\x15)\xf0~\xcbJ\x93E\xadmNt\xa2,C\xd1\xe2\xfd:\xf7\x7fe') == (
        b'f\xfax\x99\x06A\x00\xcc\x88\xf2\x88\x19U\xddwW')
    assert a.encrypt(b',J\xa0\x043V\x97\xcb\xf1qJ\xfd0\x9bAC',
        b'\xb7\xc56\xa8,\x8b\xc3\x81)/O\x10\x89\x85\x15\xff\xbe\xdcc\xbf=!\xee\xe5b\xa5\x14\x8ep\xe75\xee') == (
        b'lQU\xd8)M\xb8a\x01R\xda\x1e\xad&\x9fA')
    assert a.encrypt(b'\x0c\xf1s\x0f\x0f\x10\xbb\x8c\xdanA\xbc5\x90\x01+',
        b'\x1a\xe9\x12-L\xa5<v[\xbb"V\x80\x9c\xa6\xed\xac\xfbS0n\xad\x9d\xea\x9b\x95\xf5\xea#\xfaW\x03') == (
        b'\x98\xab\x83ha!\x97\xe2\xf8\x98~[\xf9\x91<\xff')
    assert a.encrypt(b'\x15KhU\xfcF8X\x8a_b\xeb\xc9\x8f\x16M',
        b'\x98Z\xa4(\x9e\xb4\xf0\xe2\x1d60j\xb3;\x8c\x89\x11\xff\x0c\xb2Vcz\x1dWc\xf2g\x1c\x19\xb7\x9e') == (
        b'\xbb\xacT\xe9_\\\x1a\x86\xee1\x84\xa4\xf3\xd5\xbcE')
    assert a.encrypt(b'\x0f\xca\xdc\xea\x16p\x97\xc8/\x19*\xbb;\xe2y\xe2',
        b'F\xd4>\x95}\x87\xd4k[s9\xbb1v\xd7\xc8\t\xcf\xcc\x93\xde\xe6&\xd5#|\xb8$F\xf5\x9b\x1a') == (
        b'\xc3AO\xfdt\xd5\xb1\x8d\x19\xf5\xe2S\x1b\xd6\xfb?')
    assert a.encrypt(b'f(\x94\x9b\x9d\xc7;E\xd7^\xed\x99\x08\xcb\x12\xb6',
        b'\x8e\x15 O\xb3\xe3\x8d\x08\x9e\xcf}\xbb\x89I\xaf\x94\xb9^\xe6,\x10\xe8\x08\xaa\xa9\x9aa{\xa5\x03&$') == (
        b'\xee\x1dHc\xdcoqm\x9f\xc7%\xca&\xec\xd3x')
    assert a.encrypt(b'$)\xfc]\x88|\xca\xf3c_A.\xfd\x12L\xaa',
        b'\xbb\\\xcaT\x1a\xc7;\xba\x9f\xd6\x1e\x97\xae\xe7}\xc9\xa5\xbfR\xbc\x10\xf9\x02\x15]X\x9bgjq\x96b') == (
        b'`m\xb3\xcae~.\xfa,\xfd\xf8\xf0?y\x80\x8e')
    assert a.encrypt(b'\x99q\x90\x96\x12l\t\xdc\xee\xaf\x97~\xcb\x9e\xc5\x1f',
        b'\xb6\xb1\xe5\ni\xb2+s\x11\x9e\x0e\xe6\xdb\xb3\x93\x04\xa4\x80\x8a\xe2\xaa\x84,\x8b.\xab\x03sQ\xa6\x9d(') == (
        b"\x1a\xc7^KI\xc7)\xf4c'6uP0gF")
    assert a.encrypt(b'\xaa\x13\xeb\x92\x96\x96\x17\x93\x0c\xd0G3\xdc\xe7b)',
        b'$\x92K\xa6\xa6o\x1c\xfbg\xf6b\xd3\xe1\x8c\xa31\xc5|\xcf\xfc&\xb8/\xde\x02y\xbb\xb7\x94~h\xa3') == (
        b'\xfa\xa2\xa2\x83\x05r\x8d;\xfb2\x94c\xd5Q\x12\xe8')
    assert a.encrypt(b'\xda<\xea\xd2\x1b\xc5\x00\xf5_\xe7\xce\x1c \x00\xd2\xd5',
        b'\x10\xb6{4\xefH\xaf\x84\xb41V\xf8\x91\xb3\x962\xbb\xfffrS\x9f\xa7\xec\x91Iv\xef\x1b;\x1c\x19') == (
        b'\xcaw\xf0\xa0LA\xa5\xd1\x95\xc5S\x15Dy\xd2y')
    assert a.encrypt(b'.g4\xe3\x98\x9f\xd8\xc0\x8eX\xd4\x7f\xf7\xe0\x98\xf7',
        b"\x14C;\x88\x12\x88z6%N\x83E\xaa\xf8\x00L\xbe\xe1^\xbf>\t\xbc'\xe6\xaf\xe1c\xf9\tA\x97") == (
        b'fV\xe6\x85g\x98\xbe.*\xa9\xc0-\xd3\xa6\xdb\xe4')
    assert a.encrypt(b'*\xbc\xdc\xf6\xe0\t\x02 R\xac/!\x94\x82\xff\xa0',
        b'/s\xaa~\x13\x1a\xd9<\x16\x84\xba\xd5\xbf\xf5`i\xae[\x84$S\xe0\xcd\xf2\\\xf0\xf4\x0c\xd1\xe3\xd4\x99') == (
        b's\x83\xa1}r\x92\xc2\xd0\x02\xfe\xda\xc6L=\r\xad')
    assert a.encrypt(b'\xf7\xf48\x15\xfc\xe2\xa5c!H\xa6R{4\x83\xce',
        b'\xbcuxw*\xc8}"w\x9f"\x1d(y\xf0(\x92\xc7\x7f{J\tx~kZ<\r\xe3\x14\r\x03') == (
        b'\x03N\xfa\x89\xdc\xba\xf82\xbf\x124\x9a\xf2\xbcT|')
    assert a.encrypt(b'\xaf\x86O\xa6v\xacsi4tw\xd8\xcb\xc5[w',
        b'e\xaa\xe4=\xbb\xe3\x9b\xd4h\xa4\xf6\xf2M$\xe9\x8e^\x02\x8b\xc7\xb8\xa9J\xe2\x82\rL@%M\xfe\xae') == (
        b'\x96 \xf4\xa1\xf0\xc4tJ\xe1\xab\xbf\xa6$n\xe0\x18')
    assert a.encrypt(b'UA\x9c\x88NL\xae\xbc\xdf\x91\xeeN\x808\xb9&',
        b'\xfa\xb3\xc2\x8a$\xe5\xbcd\xc3\x1e\xe0\x06Z\xa5?*\x8d\x00\xfa\x9con\xd8\xe4\xe2\x87\xd8cQ\x95}\x86') == (
        b'\xb3\xb0)f\x05y\xef\xbd\xfb\x08\x864\xe6\xeey\xfa')
    assert a.encrypt(b'\xad\x93"\xa58\ra\xfc\x12\xfcKp\x97\xd8u\xe1',
        b'\xaa\x9d\xa1\xab#!\xb5P\x88oa8\x7f\x9c\x07%\xb7\xef~\xf0\xa1ZA\xe7vA2L\x82\t\xabk') == (
        b'\xcf\x89\xa5R\xd8\xdfy\xab\xd9*\xd6-1\xbf\x8f/')
    assert a.encrypt(b'\x7f\xa5\xfa\x8a\x98\'p\x15x\xe58\x1cT\xd7D"',
        b's\xa5\x98\xfc\x12#\xb9.q\nim\xdb8\xfdc[\xe3>\xc8g\x89\xaa;rg)5\x1f\xb9\xde\x19') == (
        b'p\x1b\x16\xe4\xaa\xb94\xd9\xe2cdo\xd4&\xa6\xb8')
    assert a.encrypt(b'43\x9d\xdf\x96\x0f\x04\xa9\xc2\xa0j\xf4(\x0c\xcb\xb0',
        b'2\x8b\'\xf975\x15\xc5\xb7\x81\xbb/!>\x9b\xf3\xddfDX\xac\xf3\x1e\x19"\x14\x13\xfd`\xf8x\xad') == (
        b'\x16u\xf5Ak\xd6\xa8\xa3X\x19ihA\xa6R\x90')
    assert a.encrypt(b'\x18*\rKI\xbc\x99-Ad\xf3\xf9\xa9\x15\n\x91',
        b'\xdc\x04\x0b\x05\xd7\x96\xdc\xb6u\x95\xda\xef\x02\xc9\xbd.{\x0e\x87\xdeTJ\xd9\x0fG\xf7x\x16\xefM\xf2C') == (
        b'\x8d\xef\xfd\x1f\x8f\x83\xb9i\xafU\xad\xdb\xedJrJ')
    assert a.encrypt(b'\xd4\xf6vE\xcd9\xd8\xdeX2\xd4%\xa3z\x0c\xb0',
        b'C\xae\x9c\xbf\x16c\xfe-\xb4\xff\xcc9\x06\x0e\x1e\x81I\xa1\xca\x89ON);\x9bM\xbc\xfb!U\x07S') == (
        b'E\x80\xd5\xbc\xe1\xdf\x0e\xce\xa3\x9b\xa9z]T5\x97')

def test_decrypt():
    a = AES()
    import os
    for n in [16, 24, 32]:
        for i in range(30):
            d, k = os.urandom(16), os.urandom(n)
            assert a.decrypt(a.encrypt(d, k), k) == d


if __name__ == '__main__':

    print("testing encryption:")
    test_key_schedule()
    print("    key schedule: all tests passed")
    test_shift_rows()
    print("    shift rows: all tests passed")
    test_mix_columns()
    print("    mix_columns: all tests passed")
    test_encryption()
    print("    encryption: all tests passed")
    print("testing decryption:")
    test_decrypt()
    print("    decryption: all tests passed")
    print("all tests passed")
